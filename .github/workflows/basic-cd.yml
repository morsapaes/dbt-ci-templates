name: dbt basic cd

# Run the workflow when a pull request is closed (or merged).
on:
  pull_request:
    types:
      - closed

jobs:
  cd:
    if: github.event.pull_request.merged == true
    runs-on: ubuntu-latest

    steps:
      #-----------------------------------------------
      # check-out repo and setup python
      #-----------------------------------------------
      - name: checkout
        uses: actions/checkout@v3

      - uses: actions/setup-python@v4.5.0
        with:
          python-version: '3.10'

      #-----------------------------------------------
      # install & configure poetry
      #-----------------------------------------------
      - name: Install Poetry
        uses: snok/install-poetry@v1
        with:
          virtualenvs-create: true
          virtualenvs-in-project: true
          installer-parallel: true

      #-----------------------------------------------
      # load cached venv if cache exists
      #-----------------------------------------------
      - name: Load cached venv
        id: cached-poetry-dependencies
        uses: actions/cache@v3
        with:
          path: .venv
          key: venv-${{ runner.os }}-${{ steps.setup-python.outputs.python-version }}-${{ hashFiles('**/poetry.lock') }}

      #----------------------------------------------
      # install dependencies if cache does not exist
      #----------------------------------------------
      - name: Install dependencies
        if: steps.cached-poetry-dependencies.outputs.cache-hit != 'true'
        run: poetry install --no-interaction --no-root

      # Install dbt packages defined in packages.yml
      - name: dbt deps
        run: |
          source .venv/bin/activate
          dbt deps

      #-----------------------------------------------
      # dbt
      #-----------------------------------------------
      # - Write manifest file to s3 after run
      #
      # - Drop CI environment associated with the PR
      #
      # - Run and test modified dbt models and models
      #   downstream of them. Otherwise, defer to pro-
      #   duction for unmodified models
      #-----------------------------------------------
      - name: Build dbt
        env:
          MZ_HOST: ${{ secrets.MZ_HOST }}
          MZ_USER: ${{ secrets.MZ_USER }}
          MZ_PASSWORD: ${{ secrets.MZ_PASSWORD }}
          CI_TAG: "${{ format('{0}_{1}', 'gh_ci', github.event.number ) }}"
        run: |
          source .venv/bin/activate
          dbt run-operation drop_cluster
          dbt build --profiles-dir ./ --target production

      - name: upload manifest to s3
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_SESSION_TOKEN: ${{ secrets.AWS_SESSION_TOKEN }}
          AWS_REGION: us-east-1
        run: |
          aws s3 cp ./target/manifest.json s3://mz-test-dbt

  close:
    if: github.event.pull_request.merged == false
    runs-on: ubuntu-latest

    steps:
      #-----------------------------------------------
      # check-out repo and setup python
      #-----------------------------------------------
      - name: checkout
        uses: actions/checkout@v3

      - uses: actions/setup-python@v4.5.0
        with:
          python-version: '3.10'

      #-----------------------------------------------
      # install & configure poetry
      #-----------------------------------------------
      - name: Install Poetry
        uses: snok/install-poetry@v1
        with:
          virtualenvs-create: true
          virtualenvs-in-project: true
          installer-parallel: true

      #-----------------------------------------------
      # load cached venv if cache exists
      #-----------------------------------------------
      - name: Load cached venv
        id: cached-poetry-dependencies
        uses: actions/cache@v3
        with:
          path: .venv
          key: venv-${{ runner.os }}-${{ steps.setup-python.outputs.python-version }}-${{ hashFiles('**/poetry.lock') }}

      #----------------------------------------------
      # install dependencies if cache does not exist
      #----------------------------------------------
      - name: Install dependencies
        if: steps.cached-poetry-dependencies.outputs.cache-hit != 'true'
        run: poetry install --no-interaction --no-root

      #-----------------------------------------------
      # dbt
      #-----------------------------------------------
      #
      # - Drop CI environment associated with the PR
      #
      #-----------------------------------------------
      - name: Build dbt
        env:
          MZ_HOST: ${{ secrets.MZ_HOST }}
          MZ_USER: ${{ secrets.MZ_USER }}
          MZ_PASSWORD: ${{ secrets.MZ_PASSWORD }}
          CI_TAG: "${{ format('{0}_{1}', 'gh_ci', github.event.number ) }}"
        run: |
          source .venv/bin/activate
          dbt run-operation drop_cluster